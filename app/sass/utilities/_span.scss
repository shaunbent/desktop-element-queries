/*------------------------------------*\
    # SPAN
\*------------------------------------*/

/**
 * Generates a series of span classes that are used to manage the width of columns
 * within our grid.
 *
 *   <div class="u-6/12">
 *
 * Also generate responsive variants of each of these classes, e.g.:
 *
 *   <div class="u-12/12  u-6/12@md  u-4/12@lg">
 *
 * This is useful for making very granular changes to the rendered order of
 * items in a layout.
 */

// Which fractions would you like in your grid system(s)? By default, inuitcss
// provides you fractions of one whole, halves, thirds, quarters and fifths,
// e.g.:
//
//   .u-1/2
//   .u-2/5
//   .u-3/4
//   .u-2/3
//
$glue-grid-columns: 12 !default;


// A mixin to spit out our span classes. Pass in the columns we want the spans classes
// to have, and an optional suffix for responsive widths. E.g. to create thirds
// and quarters for a small breakpoint:
//
// @include widths(12, -sm);
//
@mixin glue-span($columns, $breakpoint: null) {
  @for $numerator from 1 through $columns {
    // Build a class in the format `.u-4/12[@<breakpoint>]`.
    .u-#{$numerator}\/#{$columns}#{$breakpoint} {
      grid-column: span #{$numerator} !important;
    }
  }
}

/**
 * A series of width helper classes that you can use to size things like grid
 * systems. Classes take a fraction-like format (e.g. `.u-2/3`). Use these in
 * your markup:
 *
 * <div class="u-7/12">
 *
 * The following will generate widths helper classes based on the fractions
 * defined in the `$glue-width-fractions` list.
 */
@include glue-span($glue-grid-columns);


/**
 * If weâ€™re using Sass-MQ, automatically generate grid system(s) for each of our
 * defined breakpoints, and give them a Responsive Suffix, e.g.:
 *
 * <div class="u-3/12@mobile">
 */

@if (variable-exists(glue-grid-breakpoints)) {
  @each $breakpoint-prefix, $breakpoint-name in $glue-grid-breakpoints {
    @include eq($from: '#{$breakpoint-name}') {
      @include glue-span($glue-grid-columns, \@#{$breakpoint-prefix});
    }
  }
}
